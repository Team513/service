requests.https: 

# Requests for API endpoints of the sample project:

### Orders Endpoints

#### Get all orders
GET http://localhost:8080/orders


#### Create a new order (Valid Request)
POST http://localhost:8080/orders
Content-Type: application/json

{
    "robotId": "robot002",  
    "status": "PENDING",
    "itemId": "item123",  
    "quantity": 10,
    "location": "Aisle 3"
}

#### Create a new order (Bad Request - Missing Required Field)
POST http://localhost:8080/orders
Content-Type: application/json

{
    "status": "PENDING",
    "itemId": "item1",
    "quantity": 10,
    "location": "location1"
}

#### Create a new order (Bad Request - Invalid Status)
POST http://localhost:8080/orders
Content-Type: application/json

{
    "robotId": "worker1",
    "status": "INVALID_STATUS",  
    "itemId": "item1",
    "quantity": 10,
    "location": "location1"
}

#### Create a new order (Bad Request - Negative Quantity)
POST http://localhost:8080/orders
Content-Type: application/json

{
    "robotId": "robot003",
    "status": "PENDING",
    "itemId": "item1",
    "quantity": -10, 
    "location": "location1"
}

#### Get order by ID (Valid Request)
@orderId = 1
@nonExistentOrderId = 9999
GET http://localhost:8080/orders/{{orderId}}

#### Get order by ID (Bad Request - Non-Existent ID)

GET http://localhost:8080/orders/{{nonExistentOrderId}}

#### Update order status (Valid Request)
PUT http://localhost:8080/orders/{{orderId}}/status
Content-Type: application/json

{
    "status": "COMPLETED"
}

#### Update order status (Bad Request - Invalid Status)
PUT http://localhost:8080/orders/{{orderId}}/status
Content-Type: application/json

{
    "status": "INVALID_STATUS"
}

#### Update order status (Bad Request - Non-Existent ID)
PUT http://localhost:8080/orders/{{nonExistentOrderId}}/status
Content-Type: application/json

{
    "status": "COMPLETED"
}

#### Delete order (Valid Request)
DELETE http://localhost:8080/orders/{{orderId}}

#### Delete order (Bad Request - Non-Existent ID)
DELETE http://localhost:8080/orders/{{nonExistentOrderId}}


# TODO add requests for your own endpoints!


### Create a new inventory item
POST http://localhost:8080/inventory
Content-Type: application/json

{
    "id": "2",
    "name": "Item A",
    "stock": 100,
    "threshold": 10
}



#### Get all inventory items
GET http://localhost:8080/inventory

#### Get inventory item by ID
# Replace `{id}` with the actual inventory item ID
GET http://localhost:8080/inventory/{id}

#### Create a new inventory item
POST http://localhost:8080/inventory
Content-Type: application/json

{
    "id": "1",
    "name": "Item A",
    "stock": 100
}

#### Update inventory stock
# Replace `{id}` with the actual inventory item ID
PUT http://localhost:8080/inventory/{id}/stock?stock=150

#### Delete inventory item
# Replace `{id}` with the actual inventory item ID
DELETE http://localhost:8080/inventory/{id}

---

### Robot Endpoints

#### Get all robots
GET http://localhost:8080/robots

#### Get robot by ID
GET http://localhost:8080/robots/{id}

#### Create a new robot
POST http://localhost:8080/robots
Content-Type: application/json

{
    "id": "robot002",
    "name": "Robot A",
    "status": "ACTIVE"
}

#### Update robot status
PUT http://localhost:8080/robots/{id}/status?status=inactive


DELETE http://localhost:8080/robots/{id}